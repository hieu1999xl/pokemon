{"version":3,"file":"static/js/932.c87ea12a.chunk.js","mappings":"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","sources":["module-pokemon/pages/detail/components/ModalCatchup.tsx","module-pokemon/pages/detail/components/ModalRename.tsx","module-pokemon/pages/detail/index.tsx","module-pokemon/services/index.ts"],"sourcesContent":["import { IMAGE_URL } from '../../../constants';\nimport imgPokeThrow from '../../../images/poke-throw.gif';\nimport imgPokeCatchSuccess from '../../../images/poke-catch-success.gif';\nimport imgPokeCatchFail from '../../../images/poke-catch-fail.gif';\nimport { PokemonResponse } from '../../../types';\nimport { Modal } from '../../../../components';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\ninterface ModalCatchupProps {\n  pokemonData: PokemonResponse;\n  openModal: boolean;\n  setOpenModal: (open: boolean) => void;\n  pokeAdmin: any;\n  setPokeAdmin: (value: any) => void;\n  canCatchUp: boolean;\n  resetState: () => void;\n}\n\nconst ModalCatchup = ({\n  pokemonData,\n  openModal,\n  setOpenModal,\n  canCatchUp,\n  pokeAdmin,\n  resetState,\n}: ModalCatchupProps) => {\n  const onCloseCatchUp = () => {\n    if ([imgPokeThrow, imgPokeCatchSuccess].includes(pokeAdmin)) return;\n    if (!canCatchUp) {\n      setOpenModal(false);\n      resetState();\n    }\n  };\n\n  return (\n    <Modal openModal={openModal} onClose={onCloseCatchUp}>\n      <div className=\"bg-white\">\n        <div className=\"catch-item\">\n          <LazyLoadImage src={pokeAdmin} width=\"100%\" className=\"loading-img\" />\n\n          <LazyLoadImage\n            src={`${IMAGE_URL}/${pokemonData.id}.png`}\n            style={{\n              display: canCatchUp && pokeAdmin == imgPokeCatchSuccess ? 'block' : 'none',\n            }}\n            className=\"lazyload-img\"\n          />\n          {[imgPokeCatchSuccess, imgPokeCatchFail].includes(pokeAdmin) && (\n            <div className=\"catch-text\">\n              <h2 className=\"catch-content\">\n                {canCatchUp ? 'Caught' : \"Can't catch\"}\n              </h2>\n            </div>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ModalCatchup;\n","import { useState } from 'react';\nimport { PokemonResponse } from '../../../types';\nimport { Modal } from '../../../../components';\n\nimport { IMAGE_URL } from '../../../constants';\n\ninterface ModalRenameProps {\n  pokemonData: PokemonResponse;\n  openModal: boolean;\n  savePokemon: (name: string) => void;\n}\n\nconst ModalRename = ({ openModal, savePokemon, pokemonData }: ModalRenameProps) => {\n  const [nameOwner, setNameOwner] = useState<string>(pokemonData?.generalInformation.name);\n\n  const handleSavePokemon = () => {\n    savePokemon(nameOwner);\n  };\n\n  return (\n    <Modal openModal={openModal} onClose={() => {}}>\n      <div className=\"modal-pokemon\">\n        <div className=\"modal-pokemon--flex\">\n          <div className=\"lazyload-wrapper modal-pokemon--jus\">\n            <img src={`${IMAGE_URL}/${pokemonData.id}.png`} width=\"20%\" />\n          </div>\n          <div className=\"modal-pokemon--jus mt2\">\n            <input\n              type=\"text\"\n              defaultValue={nameOwner}\n              onChange={event => setNameOwner(event.target.value)}\n              id=\"nameOwner\"\n              placeholder=\"Nick name\"\n              required\n            />\n          </div>\n          {!nameOwner && (\n            <div className=\"modal-pokemon--owner\">\n              This field is required\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"modal-delete--btn\">\n        <button\n          type=\"button\"\n          disabled={!nameOwner}\n          onClick={handleSavePokemon}\n          className=\"waves-effect waves-light btn-small\"\n        >\n          OK\n        </button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ModalRename;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { catchUpPokemon, getDetailPokemon } from '../../services/redux';\nimport { RootState } from '../../../redux/store';\nimport { ReduxStateType } from '../../../redux/types';\nimport { formatUpperCaseFirstLetter } from '../../../helpers/utils';\nimport { getEntitiesPokemonData } from '../../services';\nimport { IMAGE_URL, ROUTES } from '../../constants';\nimport ModalCatchup from './components/ModalCatchup';\nimport imgPokeThrow from '../../images/poke-throw.gif';\nimport imgPokeCatchSuccess from '../../images/poke-catch-success.gif';\nimport imgPokeCatchFail from '../../images/poke-catch-fail.gif';\nimport ModalRename from './components/ModalRename';\nimport { DataLoading } from '../../../components';\nimport { NavLink } from 'react-router-dom';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { PokemonResponse } from '../../types';\n\n\nconst PokemonDetail = () => {\n  const { name: namePokemonParam } = useParams();\n\n  const dispatch = useDispatch();\n\n  const [openModal, setOpenModal] = useState(false);\n  const [pokeAdmin, setPokeAdmin] = useState(imgPokeThrow);\n  const [canCatchUp, setCanCatchUp] = useState(false);\n\n  const { pokemonData, isLoading, pokemonCaught } = useSelector((state: RootState) => ({\n    pokemonData: state.pokemon.data.pokemonData,\n    isLoading: [ReduxStateType.LOADING, ReduxStateType.INIT].includes(state.pokemon.status),\n    pokemonCaught: state.pokemon.data.pokemonCaught,\n  }));\n\n  const isOwner = useMemo(() => {\n    if (canCatchUp) {\n      return true;\n    }\n    if (pokemonCaught.length > 0) {\n      return pokemonCaught.some(\n        (i: PokemonResponse) => i.generalInformation.name === pokemonData.generalInformation.name\n      );\n    }\n  }, [canCatchUp, pokemonCaught, pokemonData]);\n\n  const [openModalRename, setOpenModalRename] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (namePokemonParam) {\n      dispatch(getDetailPokemon(namePokemonParam));\n    }\n  }, [namePokemonParam]);\n\n  const pokemonInformation = getEntitiesPokemonData(pokemonData);\n\n  const savePokemon = (name: string) => {\n    const payload = {\n      ...pokemonData,\n      nameOwner: name,\n    };\n    dispatch(catchUpPokemon(payload));\n    setOpenModalRename(false);\n  };\n\n  const handleCatchUp = () => {\n    setOpenModal(true);\n    setCanCatchUp(false);\n    setTimeout(() => {\n      const catchUp = Math.random() < 0.5;\n      console.log('catchUp', catchUp);\n      setPokeAdmin(catchUp ? imgPokeCatchSuccess : imgPokeCatchFail);\n      setCanCatchUp(catchUp);\n    }, 4000);\n  };\n\n  useEffect(() => {\n    if (canCatchUp) {\n      setTimeout(() => {\n        setOpenModal(false);\n        setOpenModalRename(true);\n      }, 2000);\n    }\n  }, [canCatchUp]);\n\n  const resetState = () => {\n    setCanCatchUp(false);\n    setPokeAdmin(imgPokeThrow);\n  };\n\n  const typePokemon = pokemonInformation[0].tags;\n\n  return (\n\n      <div>\n        <DataLoading isLoading={isLoading}>\n          <div\n            className={`pokemon-info ${typePokemon?.slice(0, 1) ? typePokemon?.slice(0, 1) : typePokemon?.slice(1)}`}\n          >\n            <div className=\"row\">\n              <div className=\"col s12 m5 l4 info-block-1\">\n                <h5>Information</h5>\n                <div className=\"pills\">\n                  {pokemonInformation.map(feature => (\n                    <>\n                      {feature.tags && (\n                        <>\n                          {feature.tags.map((i, idx) => (\n                            <span>{i}</span>\n                          ))}\n                        </>\n                      )}\n                    </>\n                  ))}\n                </div>\n              </div>\n              <div className=\"col s12 m7 l8 info-block-2\">\n                <div className=\"lazyload-wrapper\">\n                  <LazyLoadImage\n                    src={`${IMAGE_URL}/${pokemonData.id}.png`}\n                    alt={`${pokemonData.generalInformation.name}`}\n                  />\n                </div>\n                <div className=\"pokebola\">\n                  <svg width={256} height={256} viewBox=\"0 0 256 256\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                      d=\"M189.714 140.516C185.061 170.342 159.184 193.178 127.918 193.178C96.6531 193.178 70.7755 170.342 66.1224 140.516H0C6.28571 205.288 61.2245 256 128 256C194.776 256 249.633 205.288 256 140.516H189.714Z\"\n                      fill=\"white\"\n                      fillOpacity=\"0.4\"\n                    />\n                    <path\n                      d=\"M128 175.787C154.51 175.787 176 154.392 176 128C176 101.608 154.51 80.2133 128 80.2133C101.49 80.2133 80 101.608 80 128C80 154.392 101.49 175.787 128 175.787Z\"\n                      fill=\"white\"\n                      fillOpacity=\"0.4\"\n                    />\n                    <path\n                      d=\"M67.3469 115.484C74.2857 88.5841 98.7755 68.673 128 68.673C157.224 68.673 181.714 88.5841 188.571 115.484H255.918C249.633 50.7124 194.694 0 128 0C61.2245 0 6.28571 50.7124 0 115.484H67.3469Z\"\n                      fill=\"white\"\n                      fillOpacity=\"0.4\"\n                    />\n                  </svg>\n                </div>\n              </div>\n            </div>\n            <div className=\"row details\">\n              <div className=\"col s12\">\n                <div className=\"details-tabs\">\n                  <div className=\"col s12\">\n                    <div>\n                      <h2>\n                        {formatUpperCaseFirstLetter(pokemonData.generalInformation.name)}\n                        {isOwner && (\n                          <NavLink to={`/${ROUTES.MY_POKEMON}`}>\n                            <span className='name-owned'>Owned</span>\n                          </NavLink>\n                        )}\n                      </h2>\n\n                      <div className=\"\">\n                        {pokemonInformation.map(feature => (\n                          <div key={feature.name} className=\"col s12 m6 l6 block-detail\">\n                            <div className=\"name_detail\">{feature.name}</div>\n                            {feature.description && <div className=\"\">{feature.description}</div>}\n                            {feature.tags && (\n                              <div className={feature.name === 'Moves' ? '' : 'flex-types'}>\n                                {feature.tags.map((i, idx) => (\n                                  <div key={idx}  className={`button-types pokemon-info ${typePokemon?.slice(0, 1) ? typePokemon?.slice(0, 1) : typePokemon?.slice(1)}`}>\n                                    {i}\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <div >{!isOwner && <button className=\"waves-effect waves-light btn\" onClick={handleCatchUp}>Catch Pokemon</button>}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </DataLoading>\n   \n\n      {openModal && (\n        <ModalCatchup\n          key={JSON.stringify(pokemonData)}\n          openModal={openModal}\n          setOpenModal={setOpenModal}\n          pokeAdmin={pokeAdmin}\n          setPokeAdmin={setPokeAdmin}\n          canCatchUp={canCatchUp}\n          pokemonData={pokemonData}\n          resetState={resetState}\n        />\n      )}\n      {openModalRename && (\n        <ModalRename\n          key={JSON.stringify(pokemonData)}\n          openModal={openModalRename}\n          savePokemon={savePokemon}\n          pokemonData={pokemonData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PokemonDetail;\n","import { PokemonResponse } from '../types';\n\nexport const getEntitiesPokemonData = (pokemonData?: PokemonResponse) => {\n  let features: Array<{ name: string; description: string | number; tags?: Array<string> }> = [];\n\n  if (!pokemonData) return features;\n\n  if (pokemonData.generalInformation.types) {\n    features.push({\n      name: 'Types',\n      description: '',\n      tags: pokemonData.generalInformation.types,\n    });\n  }\n  if (pokemonData.generalInformation.weight) {\n    features.push({\n      name: 'Weight',\n      description: `${pokemonData.generalInformation.weight} kg`,\n    });\n  }\n  if (pokemonData.generalInformation.baseExp) {\n    features.push({\n      name: 'Height',\n      description: `${pokemonData.generalInformation.height} m`,\n    });\n  }\n  if (pokemonData.generalInformation.baseExp) {\n    features.push({\n      name: 'Base Exp',\n      description: pokemonData.generalInformation.baseExp,\n    });\n  }\n  if (pokemonData.moves) {\n    features.push({\n      name: 'Moves',\n      description: pokemonData.moves.join(', '),\n    });\n  }\n  return features;\n};\n"],"names":["pokemonData","openModal","setOpenModal","canCatchUp","pokeAdmin","resetState","onClose","imgPokeThrow","imgPokeCatchSuccess","includes","className","LazyLoadImage","src","width","IMAGE_URL","id","style","display","imgPokeCatchFail","savePokemon","useState","generalInformation","name","nameOwner","setNameOwner","type","defaultValue","onChange","event","target","value","placeholder","required","disabled","onClick","namePokemonParam","useParams","dispatch","useDispatch","setPokeAdmin","setCanCatchUp","useSelector","state","pokemon","data","isLoading","ReduxStateType","status","pokemonCaught","isOwner","useMemo","length","some","i","openModalRename","setOpenModalRename","useEffect","getDetailPokemon","pokemonInformation","getEntitiesPokemonData","setTimeout","typePokemon","tags","slice","map","feature","idx","alt","height","viewBox","fill","xmlns","d","fillOpacity","formatUpperCaseFirstLetter","to","ROUTES","description","catchUp","Math","random","console","log","JSON","stringify","payload","catchUpPokemon","features","types","push","weight","baseExp","moves","join"],"sourceRoot":""}